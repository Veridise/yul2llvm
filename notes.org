* pyul dev
* tasks
** DONE basic solc compilation
   - [X] generate yul IR from sol file
   - [X] output
     + [X] write to file
     + [X] options for name, directory
   - [X] niceties
     + [X] check for existing files before overwriting
     + [X] solc checks
       * [X] is it on path and what version?
       * have an init command for now, take that as baseline
** DONE json compile api
   - [X] for a given sol file, extract
     + [X] abi data
     + [X] storage/resource map
     + [X] yul
   - [X] yul translation
   - [X] yul parse
** NEXT basic json transformations
- for some node in the AST, the general pattern for now is roughly:
  #+begin_src js
    // json
    { "type": "yul_statement", children: [ /* ... */ ] }
  #+end_src
  + will eventually want to prune this representation and perform
    transformations that will be useful to the cpp llvm component.
  + e.g. reducing useless nesting of =yul_statement= nodes, for example
* notes
** dev
*** AST representation
using the results of =solc --ir= on =corpus/SimpleAdd.sol= as context

- v1 representation is wanted to look something like:
#+begin_src js
  {
      "type":"yul_function_definition", 
      "children":[
          {
              "type":"yul_identifier", 
              "children" : [
                  "fun_add_21"
              ]
          },
          {
              "type": "yul_function_arg_list",
              "children": [
                  {
                      "type": "yul_typed_identifier_list",
                      "children":
                      [
                          {
                              "type":"yul_identifier",
                              "children":[
                                  "var_a_9"
                              ]
                          },
                          {
                              "type":"yul_identifier",
                              "children":[
                                  "var_b_11"
                              ]
                          }
                      ]   
                  }
              ]
          },
          {
              "type": "yul_function_ret_list",
              "children": [
                  {
                      "type":"yul_typed_identifier_list", 
                      "children":
                      [
                          {
                              "type":"yul_identifier", 
                              "children":[
                                  "var__14"
                              ]
                          }
                      ]
                  }
              ]
          },
          {
              "type":"yul_block",
              "children": [
                  {
                    
                      "type": "yul_variable_declaration",
                      "children":[
                          {
                              "type":"yul_typed_identifier_list",
                              "children":
                              [
                                  {
                                      "type":"yul_identifier",
                                      "children":[
                                          "zero_t_uint256_1"
                                      ]
                                  }
                              ]
                          }
                      ]
                  },
                  {
                    
                      "type": "yul_function_call", 
                      "children":
                      [
                          {
                              "type":"yul_identifier",
                              "children":[
                                  "zero_value_for_split_t_uint256"
                              ]    
                          }
                      ]
                    
                  },
                  {                
                      "type":"yul_assignment",
                      "children":[
                          {
                              "type":"yul_identifier_list",
                              "children":[
                                  {
                                      "type":"yul_assignment",
                                      "children": [
                                          "var__14"
                                      ]
                                  }
                              ]
                          },
                          {
                              "type":"yul_identifier",
                              "children":[
                                  "zero_t_uint256_1"
                              ]
                          }
                      ]
                  },
                  {
                      "type":"yul_variable_declaration",
                      "children":[
                          {
                              "type":"yul_typed_identifier_list",
                              "children":[
                                  {
                                      "type":"yul_identifier",
                                      "children":[
                                          "_2"
                                      ]
                                  }
                              ]
                          },
                          {
                              "type": "yul_identifier",
                              "children":[
                                 "var_a_9"
                              ]
                          }
                      ]
                  },
                  {
                   
                      "type":"yul_variable_declaration",
                      "children":[
                          {
                              "type":"yul_typed_identifier_list",
                              "children":[
                                  {
                                      "type":"yul_identifier",
                                      "children":[
                                          "expr_16"
                                      ]
                                  }
                              ]
                          },
                          {
                              "yul_expression":
                              {
                                  "yul_identifier":
                                  "_2"
                              }
                          }
                      ]
                    
                  },
                  {
                    
                      "type":"yul_variable_declaration",
                      "children":[
                          {
                              "type":"yul_typed_identifier_list",
                              "children":[
                                  {
                                      "type":"yul_identifier",
                                      "children":[
                                          "_3"
                                      ]
                                  }
                              ]
                          },
                          {
                              "type":"yul_identifier",
                              "children":[
                                  "var_b_11"
                              ]
                          }
                      ]
                  },
                  {  
                      "type":"yul_variable_declaration",
                      "children":[
                          {
                              "type":"yul_typed_identifier_list",
                              "children":[
                                  {
                                      "yul_identifier":
                                      "expr_17"
                                  }
                              ]
                          },
                          {
                              "type":"yul_identifier",
                              "children": [
                                  "_3"
                              ]
                            
                          }
                      ]
                    
                  },
                  {
                      "type": "yul_variable_declaration",
                      "children":[
                          {
                              "yul_typed_identifier_list":
                              {
                                  "yul_identifier":
                                  "expr_18"
                              }
                          },
                          {
                            
                              "type":"yul_function_call",
                              "children":
                              [
                                  {
                                      "type": "yul_identifier",
                                      "children":[
                                          "checked_add_t_uint256"
                                      ]
                                  },
                                  {
                                      "type":"yul_function_arg_list",
                                      "children":[
                                          {
                                              "type":"yul_identifier",
                                              "children":[
                                                  "expr_16"
                                              ]
                                          },
                                          {
                                              "type": "yul_identifier",
                                              "children":[
                                                  "expr_17"
                                              ]
                                          }
                                        
                                      ]
                                  }
                              ]
                            
                          }
                      ]
                    
                  },
                  {
                      "type":"yul_assignment",
                      "children": [
                          {
                              "type":"yul_identifier_list",
                              "children":[
                                  {
                                      "type":"yul_identifier",
                                      "children":[
                                          "var__14"
                                      ]
                                  }
                              ]
                          },
                          {
                              "type":"yul_identifier",
                              "children":[
                                  "expr_18"
                              ] 
                          }
                      ]
                  },
                  {
                      "type": "yul_leave_statement"
                  }
              ]
          }
      ]
  }
#+end_src

** useful commands
   using =HelloWorld.sol= as example input:
   #+begin_src solidity
     // SPDX-License-Identifier: MIT
     // HelloWorld.sol

     pragma solidity ^0.8.0;

     contract HelloWorld {
         function get() public pure returns (string memory) {
             return 'Hello, World.';
         }
     }
   #+end_src
*** solc
    - ast representation of a given file
      #+begin_src sh
        solc --ast-compact-json HelloWorld.sol | less -n +5 | jq
      #+end_src

      will yield us:
      #+begin_src json
        {
          "absolutePath": "HelloWorld.sol",
          "exportedSymbols": {
            "HelloWorld": [
              10
            ]
          },
          "id": 11,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "HelloWorld",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 10,
              "linearizedBaseContracts": [
                10
              ],
              "name": "HelloWorld",
              "nameLocation": "67:10:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 8,
                    "nodeType": "Block",
                    "src": "135:39:0",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "48656c6c6f2c20576f726c642e",
                          "id": 6,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "152:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_0b8d199d8806c38e3085259418508d284aea37512054d7070046a0cdda4e1495",
                            "typeString": "literal_string \"Hello, World.\""
                          },
                          "value": "Hello, World."
                        },
                        "functionReturnParameters": 5,
                        "id": 7,
                        "nodeType": "Return",
                        "src": "145:22:0"
                      }
                    ]
                  },
                  "functionSelector": "6d4ce63c",
                  "id": 9,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "get",
                  "nameLocation": "93:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "96:2:0"
                  },
                  "returnParameters": {
                    "id": 5,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 9,
                        "src": "120:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "120:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "119:15:0"
                  },
                  "scope": 10,
                  "src": "84:90:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 11,
              "src": "58:118:0",
              "usedErrors": []
            }
          ],
          "src": "33:144:0"
        }
      #+end_src

    - ir
      #+begin_src sh
        solc --ir HelloWorld.sol
      #+end_src

      yields something like:

      #+begin_src fundamental
        /// @use-src 0:"HelloWorld.sol"
        object "HelloWorld_10" {
            code {
                /// @src 0:58:176  "contract HelloWorld {..."
                mstore(64, memoryguard(128))
                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

                constructor_HelloWorld_10()

                let _1 := allocate_unbounded()
                codecopy(_1, dataoffset("HelloWorld_10_deployed"), datasize("HelloWorld_10_deployed"))

                return(_1, datasize("HelloWorld_10_deployed"))

                function allocate_unbounded() -> memPtr {
                    memPtr := mload(64)
                }

                function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
                    revert(0, 0)
                }

                /// @src 0:58:176  "contract HelloWorld {..."
                function constructor_HelloWorld_10() {

                    /// @src 0:58:176  "contract HelloWorld {..."

                }
                /// @src 0:58:176  "contract HelloWorld {..."

            }
            /// @use-src 0:"HelloWorld.sol"
            object "HelloWorld_10_deployed" {
                code {
                    /// @src 0:58:176  "contract HelloWorld {..."
                    mstore(64, memoryguard(128))
                    /// SNIP REST OF CODE
      #+end_src
